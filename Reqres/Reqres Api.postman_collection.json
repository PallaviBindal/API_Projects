{
	"info": {
		"_postman_id": "fdeceec7-3f27-4c35-bc7c-8894665c92d8",
		"name": "Reqres Api",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Users",
			"item": [
				{
					"name": "List Of Users",
					"item": [
						{
							"name": "View Users using valid route",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d25fef01-909f-4f58-a15f-9983766c02dd",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Verify page number\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.page).to.eql(parseInt(pm.variables.get(\"pagenumber\")));\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}api/users?page={{pagenumber}}",
									"host": [
										"{{url}}api"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "page",
											"value": "{{pagenumber}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "View users using invalid route",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0e593051-aa1d-4423-8884-22f45d5fa5fb",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"pm.test(\"Status code name has not found\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}api/",
									"host": [
										"{{url}}api"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "View users using invalid page number",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "31ce55fb-f6cf-45b4-bb9a-18845c19bfa2",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": {{name}},\r\n    \"job\": {{job}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}api/users?page=p",
									"host": [
										"{{url}}api"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "page",
											"value": "p"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "CRUD workflow using valid input",
					"item": [
						{
							"name": "Create user ",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8738f3c8-7d72-4f4b-88da-d48337d07eb9",
										"exec": [
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Verify name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\"));\r",
											"    pm.collectionVariables.set(\"id\", jsonData.id);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify job\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.job).to.eql(pm.variables.get(\"job\"));\r",
											"\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{name}}\",\r\n    \"job\": \"{{job}}\"\r\n    \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}api/users",
									"host": [
										"{{url}}api"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "view the newly created user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2db6ab63-7929-44cb-86c0-323b99a6e673",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}api/users/{{id}}",
									"host": [
										"{{url}}api"
									],
									"path": [
										"users",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update User",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c055232a-c7a4-404b-9be3-45c97f10932d",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.name).to.eql(\"momin\");\r",
											"});\r",
											"pm.test(\"Verify job\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.job).to.eql(\"QA\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"updatedAt\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"momin\",\r\n    \"job\": \"QA\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}api/users/{{id}}",
									"host": [
										"{{url}}api"
									],
									"path": [
										"users",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ee88f2ba-afb0-4e37-bc1c-bb9d3f105a47",
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}api/users/{{id}}",
									"host": [
										"{{url}}api"
									],
									"path": [
										"users",
										"{{id}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Negative path",
					"item": [
						{
							"name": "View a user after deleting it",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d4c3b404-47a7-4ac6-82dd-47b3646be58c",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}api/users/{{id}}",
									"host": [
										"{{url}}api"
									],
									"path": [
										"users",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "View non existing user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7869755f-6e52-4392-a116-a036c9780ba7",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}api/users/35",
									"host": [
										"{{url}}api"
									],
									"path": [
										"users",
										"35"
									]
								}
							},
							"response": []
						},
						{
							"name": "View user with invalid id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "92430d3e-2a7e-41bc-8de2-a6adc477e248",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}api/users/Ad",
									"host": [
										"{{url}}api"
									],
									"path": [
										"users",
										"Ad"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create user with null input",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "78f5f25a-f97a-4269-83ae-7aab11458405",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"\",\r\n    \"job\": \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}api/users",
									"host": [
										"{{url}}api"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create user with invalid name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a55da463-f922-4c62-8979-30cbf2bebf86",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": 009,\r\n    \"job\": \"{{job}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}api/users",
									"host": [
										"{{url}}api"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create user with null body",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "59f434c8-85c6-440d-a61b-d14902a1bc8e",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}api/users",
									"host": [
										"{{url}}api"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update user without id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "13d444d3-0ff6-41f9-8f13-c4e431790d10",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"\",\r\n    \"job\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}api/users/",
									"host": [
										"{{url}}api"
									],
									"path": [
										"users",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Update user using invalid name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eb1894b6-a8ee-48fe-9e79-fc91b026090f",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": 09#,\r\n    \"job\": \"{{job}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}api/users/",
									"host": [
										"{{url}}api"
									],
									"path": [
										"users",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Update user without body",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8c1748bf-58f1-4e25-acf2-1aeca7cb3faf",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}api/users/{{id}}",
									"host": [
										"{{url}}api"
									],
									"path": [
										"users",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete user without id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "75e21e63-57c1-4d68-bc69-0f5ce9b287b8",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}api/users/",
									"host": [
										"{{url}}api"
									],
									"path": [
										"users",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete non existing user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9233d37f-6f0f-480d-81bf-db0c03a80e7f",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}api/users/AAA",
									"host": [
										"{{url}}api"
									],
									"path": [
										"users",
										"AAA"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Resources",
			"item": [
				{
					"name": "View Resources using valid route",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1621e33d-9f94-464c-bd8d-4c8267b0cb6f",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}api/unknown",
							"host": [
								"{{url}}api"
							],
							"path": [
								"unknown"
							]
						}
					},
					"response": []
				},
				{
					"name": "View Resources using invalid route Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e7634059-9918-492d-ac9b-8559d7cd11ed",
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"pm.test(\"Status code name has not found\", function () {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}api/",
							"host": [
								"{{url}}api"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "View Resource using valid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d940aa3c-db12-4a26-8220-b9a9af332097",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Verify id\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.id).to.eql(parseInt(pm.variables.get(\"resourceId\")));\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}api/unknown/{{resourceId}}",
							"host": [
								"{{url}}api"
							],
							"path": [
								"unknown",
								"{{resourceId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "View Resource using invalid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dd4c29b8-c553-4ab4-8b5f-ebe83b03b88b",
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}api/unknown/A",
							"host": [
								"{{url}}api"
							],
							"path": [
								"unknown",
								"A"
							]
						}
					},
					"response": []
				},
				{
					"name": "View non existing Resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a6bd3cbb-330e-4ae7-bc38-ad0270089ba1",
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}api/unknown/30",
							"host": [
								"{{url}}api"
							],
							"path": [
								"unknown",
								"30"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Register",
			"item": [
				{
					"name": "Successful Register",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cae563a0-fe51-4bfa-91d7-b8740f0f0df3",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}api/register",
							"host": [
								"{{url}}api"
							],
							"path": [
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register using null email",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b3b6518f-8e2c-47ad-8f57-dc12a0b806e5",
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Missing email or username\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \r\n    \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}api/register",
							"host": [
								"{{url}}api"
							],
							"path": [
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register using null password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5bc895f9-cf1c-4fb9-abb0-0ec8dbb3da8a",
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Missing password\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n     \"email\": \"{{email}}\",\r\n    \"password\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}api/register",
							"host": [
								"{{url}}api"
							],
							"path": [
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register using null body",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b94b72e4-158a-466a-a4e4-4422ebe705d8",
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}api/register",
							"host": [
								"{{url}}api"
							],
							"path": [
								"register"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Login",
			"item": [
				{
					"name": "Login using null body",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "821a11a8-1f68-4454-a3d5-d334142f07a5",
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}api/login",
							"host": [
								"{{url}}api"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login using null password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "949194b0-81c2-4dc3-b84e-ecd69d539568",
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Missing password\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n     \"email\": \"{{email}}\",\r\n    \"password\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}api/login",
							"host": [
								"{{url}}api"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login using null email",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6769a2de-6db4-4005-9160-cef803119bd0",
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Missing email or username\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \r\n    \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}api/login",
							"host": [
								"{{url}}api"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Successful Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b9062345-44bb-462a-9d66-7489a02ec9ba",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}api/login",
							"host": [
								"{{url}}api"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "f90b66f0-2709-4e46-959d-b1f68bdde7a1",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "c92e7a50-c9ab-402d-887a-063812850083",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "9ef076fa-2ffa-4e5a-baf8-580ec036241f",
			"key": "url",
			"value": "https://reqres.in/"
		},
		{
			"id": "46a8dd3f-742a-49c6-bffb-2e266acb56d6",
			"key": "name",
			"value": "Nilam"
		},
		{
			"id": "d8395465-aaf0-446a-ad6b-003127e3f67a",
			"key": "job",
			"value": "Tester"
		},
		{
			"id": "89839945-880f-45a4-b70e-2ecf5b6df476",
			"key": "id",
			"value": ""
		},
		{
			"id": "3ab9b008-74da-49ba-970e-2e9e364ab3f8",
			"key": "resourceId",
			"value": ""
		},
		{
			"id": "73da3537-1d64-4da2-ba88-f5a48734e614",
			"key": "email",
			"value": "eve.holt@reqres.in"
		},
		{
			"id": "2224c786-a824-4089-876f-953266b2ab57",
			"key": "password",
			"value": "pistol"
		},
		{
			"id": "adc83eb7-e662-46a5-88b0-98dd150f3c2c",
			"key": "pagenumber",
			"value": "2"
		}
	],
	"protocolProfileBehavior": {}
}