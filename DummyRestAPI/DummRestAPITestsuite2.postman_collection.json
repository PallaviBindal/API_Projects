{
	"info": {
		"_postman_id": "afef38d6-0703-4e6a-9d0d-8b1609ead315",
		"name": "DummRestAPITestsuite2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Valid inputs ",
			"item": [],
			"protocolProfileBehavior": {}
		},
		{
			"name": "get a valid record",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "43621575-4169-42fb-b56b-2e3ad4ddf804",
						"exec": [
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"verify status value\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"success\");\r",
							"});\r",
							"pm.test(\"verify employee name \", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.employee_name).to.eql(\"Herrod Chandler\");\r",
							"});\r",
							"pm.test(\" Test 1- Returns 2 char alhpanumeric age\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.employee_age).to.match(/^[a-z0-9]{2}$/);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/v1/employee/7",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v1",
						"employee",
						"7"
					]
				}
			},
			"response": []
		},
		{
			"name": "fetch a record if record is updated",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c17489c3-681f-444a-89fc-09daa1424c13",
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/emp",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"emp"
					]
				}
			},
			"response": []
		},
		{
			"name": "create a record with valid inputs",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "eef1fef5-9971-43b7-9f52-8fe5942a5c37",
						"exec": [
							"var commontests = () =>\r",
							"{\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"};\r",
							"\r",
							"pm.environment.set(\"commontests\",commontests.toString());\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "1ad55045-5204-4755-b674-fd6e2264bb46",
						"exec": [
							"\r",
							"\r",
							"\r",
							" \r",
							"// pm.test(\"Your test name\", function () {\r",
							"//     var jsonData = pm.response.json();\r",
							"//     pm.expect(jsonData.age).to.eql(pm.environment.get(\"age\"));\r",
							"// });\r",
							"\r",
							"// pm.test(\"Verify employee age\", function () {\r",
							"//     var jsonData = pm.response.json();\r",
							"//     pm.expect(jsonData.data.age).to.eql(pm.environment.get(\"age\"\"\"));\r",
							"// });\r",
							"\r",
							"// pm.test(\"verify age with invalid inputs \", function () {\r",
							"//     pm.expect(pm.response.text()).to.include(\"name\");\r",
							"// });\r",
							"pm.test(\"verify age\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.age).to.eql(\"20\");\r",
							"   \r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"verify name \", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.name).to.eql(\"test1\");\r",
							"    \r",
							"pm.environment.set(\"id\", jsonData.data.id);\r",
							"\r",
							"   \r",
							"});\r",
							"\r",
							"// pm.test(\" Test 2- Returns 4 char alhpanumeric id\", function () {\r",
							"//     let jsonData = pm.response.json();\r",
							"//     //pm.expect(jsonData.data.salary).to.match(/^[a-z0-9]{4}$/);\r",
							"//     pm.expect(jsonData.data.salary).to.match(\"salary\");\r",
							"// });\r",
							"// pm.test(\" Test 3- return value\", function () {\r",
							"//     let jsonData = pm.response.json();\r",
							"//     pm.expect(jsonData.data.salary).to.eql(\"20000\");\r",
							"// });\r",
							"\r",
							"// pm.test(\" Test 4- Returns 2 char alhpanumeric id\", function () {\r",
							"//     let jsonData = pm.response.json();\r",
							"//   //  pm.expect(jsonData.data.age).to.match(/^[a-z0-9]{2}$/);\r",
							"//    pm.expect(jsonData.data.age).to.eql(\"age\");\r",
							"// });\r",
							"\r",
							"// const schema = {\r",
							"//     \"type\" : \"object\" ,\r",
							"//     \"properties\" :  {\r",
							"//          \"status\" : { \"type\" : \"string\"},\r",
							"//          \"data\": {\r",
							"//              \"type\" :\"object\",\r",
							"//              \"properties\" : {\r",
							"//                 \"name\" : { \"type\" : \"string\"},\r",
							"//                 \"salary\" : {\"type\" : \"string\"},\r",
							"//                 \"age\" : {\"type\" : \"string\"},\r",
							"//                 \"id\" : {\"type\": \"integer\"}\r",
							"//              },\r",
							"//             required : [\"name\",\"salary\",\"age\"]\r",
							"\r",
							"//          }\r",
							"//     },\r",
							"//     required :[\"status\", \"data\"],\r",
							"//     };\r",
							"\r",
							"\r",
							"\r",
							"// pm.test(\"test 5- validate schema\",() => {\r",
							"\r",
							"//     pm.response.to.have.jsonSchema(schema);\r",
							"// });\r",
							"\r",
							"// pm.test(\" test 6- Body matches string\", function () {\r",
							"//     pm.expect(pm.response.text()).to.include(\"ruhan\");\r",
							"// });\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"test1\",\n    \"salary\": \"200000\",\n    \"age\": \"20\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/v1/create",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v1",
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "create a record with valid json schema",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "86ab6f0f-6f23-43e4-82dd-6eab919d0d81",
						"exec": [
							"var commontests = () =>\r",
							"{\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"};\r",
							"\r",
							"pm.environment.set(\"commontests\",commontests.toString());\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "9071cbe1-3ed3-48a0-a008-d4b51938b454",
						"exec": [
							"\r",
							"\r",
							"\r",
							"pm.test(\"verify age\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.age).to.eql(\"20\");\r",
							"   \r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"verify name \", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.name).to.eql(\"test1\");\r",
							"    \r",
							"\r",
							"\r",
							"   \r",
							"});\r",
							"\r",
							"const schema = {\r",
							"    \"TYPE\" : \"OBJECT\" ,\r",
							"    \"properties\" :  {\r",
							"         \"status\" : { \"TYPE\" : \"STRING\"},\r",
							"         \"data\": {\r",
							"             \"TYPE\" :\"OBJECT\",\r",
							"             \"PROPERTIES\" : {\r",
							"                \"name\" : { \"TYPE\" : \"STRING\"},\r",
							"                \"salary\" : {\"TYPE\" : \"STRING\"},\r",
							"                \"age\" : {\"TYPE\" : \"STRING\"},\r",
							"                \"id\" : {\"TYPE\": \"INTEGER\"}\r",
							"             },\r",
							"            required : [\"name\",\"salary\",\"age\"]\r",
							"\r",
							"         }\r",
							"    },\r",
							"    required :[\"status\", \"data\"],\r",
							"    };\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"TEST 5- VALIDATE SCHEMA\",() => {\r",
							"\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"test1\",\n    \"salary\": \"200000\",\n    \"age\": \"20\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/v1/create",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v1",
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete a record wih valid id",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0d26394a-dae9-4a5d-bfba-5f15be8c2e82",
						"exec": [
							"pm.test(\"test 1- Content-Type is JSON\", function () {\r",
							"    pm.response.to.be.json;\r",
							"})\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"test 3- matches message text \", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(\"successfully! deleted Records\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/v1/delete/54",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v1",
						"delete",
						"54"
					]
				},
				"description": "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors"
			},
			"response": [
				{
					"name": "Invalid ID supplied",
					"originalRequest": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/store/order/:orderId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"store",
								"order",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId"
								}
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				},
				{
					"name": "Order not found",
					"originalRequest": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/store/order/:orderId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"store",
								"order",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId"
								}
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "update an existing recordwith valid data",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "be1273dc-38cb-4db8-a6ef-47b58ea74c9b",
						"exec": [
							"\r",
							"pm.test(\"test 1- Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"id\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"check id value \", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.id).to.eql(71);\r",
							"});\r",
							"\r",
							"pm.test(\"test 3 - Expected value matches with actual value\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.status).to.eql(\"success\");\r",
							"  pm.expect(jsonData.data.employee_name).to.eql(\"rajesh\");\r",
							"});\r",
							"pm.test(\"test 4- Body is correct\", function () \r",
							"{\r",
							"    pm.response.to.have.body(\r",
							"    {\r",
							"    \"status\": \"success\",\r",
							"    \"data\": {\r",
							"        \"employee_name\": \"rajesh\",\r",
							"        \"employee_salary\": \"3000\",\r",
							"        \"employee_age\": \"23\",\r",
							"        \"id\": 71\r",
							"    }\r",
							"    }\r",
							"    )});\r",
							"\r",
							"    \r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"test 7- Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"test 8- employee age should equal to 23\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.employee_age).to.eql(\"23\");\r",
							"     \r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"rajesh\",\n    \"salary\": \"3000\",\n    \"age\": \"23\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/v1/update/71",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v1",
						"update",
						"71"
					]
				}
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}